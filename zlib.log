[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 15) -> 32768 [32-bit: 1 * 2^15 = 32768]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 15) -> 32768 [32-bit: 1 * 2^15 = 32768]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 14) -> 16384 [32-bit: 1 * 2^14 = 16384]
[2025-07-31 21:43:35] [Adler32::adler32] null buffer provided, returning initial value 1
[2025-07-31 21:43:35] [Huffman::createStaticLiteralTree] Creating static literal tree per RFC 1951 Section 3.2.6
[2025-07-31 21:43:35] [Huffman::createStaticLiteralTree] Setting literals 0-143 to 8 bits
[2025-07-31 21:43:35] [Huffman::createStaticLiteralTree] Setting literals 144-255 to 9 bits
[2025-07-31 21:43:35] [Huffman::createStaticLiteralTree] Setting length codes 256-279 to 7 bits
[2025-07-31 21:43:35] [Huffman::createStaticLiteralTree] Setting length codes 280-287 to 8 bits
[2025-07-31 21:43:35] [Huffman::calculateCodes] Starting RFC 1951 canonical Huffman code calculation for 288 symbols
[2025-07-31 21:43:35] [Huffman::calculateCodes] Step 1: Counting codes per bit length
[2025-07-31 21:43:35] [Huffman::calculateCodes] Code length counts: [7:24, 8:152, 9:112]
[2025-07-31 21:43:35] [Huffman::calculateCodes] Step 2: Calculating starting codes for each bit length
[2025-07-31 21:43:35] [Huffman::calculateCodes] Bit length 7: starting code=0 (24 symbols)
[2025-07-31 21:43:35] [Huffman::calculateCodes] Bit length 8: starting code=48 (152 symbols)
[2025-07-31 21:43:35] [Huffman::calculateCodes] Bit length 9: starting code=400 (112 symbols)
[2025-07-31 21:43:35] [Huffman::calculateCodes] Starting codes: [8:48, 9:400, 10:1024, 11:2048, 12:4096, 13:8192, 14:16384, 15:32768]
[2025-07-31 21:43:35] [Huffman::calculateCodes] Step 3: Assigning codes to symbols
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=65 -> code=113 (8 bits) [0x71]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=66 -> code=114 (8 bits) [0x72]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=67 -> code=115 (8 bits) [0x73]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=68 -> code=116 (8 bits) [0x74]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=69 -> code=117 (8 bits) [0x75]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=70 -> code=118 (8 bits) [0x76]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=71 -> code=119 (8 bits) [0x77]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=72 -> code=120 (8 bits) [0x78]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=73 -> code=121 (8 bits) [0x79]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=74 -> code=122 (8 bits) [0x7a]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=75 -> code=123 (8 bits) [0x7b]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=76 -> code=124 (8 bits) [0x7c]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=77 -> code=125 (8 bits) [0x7d]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=78 -> code=126 (8 bits) [0x7e]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=79 -> code=127 (8 bits) [0x7f]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=80 -> code=128 (8 bits) [0x80]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=81 -> code=129 (8 bits) [0x81]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=82 -> code=130 (8 bits) [0x82]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=83 -> code=131 (8 bits) [0x83]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=84 -> code=132 (8 bits) [0x84]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=85 -> code=133 (8 bits) [0x85]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=86 -> code=134 (8 bits) [0x86]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=87 -> code=135 (8 bits) [0x87]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=88 -> code=136 (8 bits) [0x88]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=89 -> code=137 (8 bits) [0x89]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=90 -> code=138 (8 bits) [0x8a]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=97 -> code=145 (8 bits) [0x91]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=98 -> code=146 (8 bits) [0x92]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=99 -> code=147 (8 bits) [0x93]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=100 -> code=148 (8 bits) [0x94]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=101 -> code=149 (8 bits) [0x95]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=102 -> code=150 (8 bits) [0x96]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=103 -> code=151 (8 bits) [0x97]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=104 -> code=152 (8 bits) [0x98]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=105 -> code=153 (8 bits) [0x99]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=106 -> code=154 (8 bits) [0x9a]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=107 -> code=155 (8 bits) [0x9b]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=108 -> code=156 (8 bits) [0x9c]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=109 -> code=157 (8 bits) [0x9d]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=110 -> code=158 (8 bits) [0x9e]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=111 -> code=159 (8 bits) [0x9f]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=112 -> code=160 (8 bits) [0xa0]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=113 -> code=161 (8 bits) [0xa1]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=114 -> code=162 (8 bits) [0xa2]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=115 -> code=163 (8 bits) [0xa3]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=116 -> code=164 (8 bits) [0xa4]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=117 -> code=165 (8 bits) [0xa5]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=118 -> code=166 (8 bits) [0xa6]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=119 -> code=167 (8 bits) [0xa7]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=120 -> code=168 (8 bits) [0xa8]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=121 -> code=169 (8 bits) [0xa9]
[2025-07-31 21:43:35] [Huffman::calculateCodes] symbol=122 -> code=170 (8 bits) [0xaa]
[2025-07-31 21:43:35] [Huffman::calculateCodes] Code assignment complete: 288 codes assigned
[2025-07-31 21:43:35] [DEBUG_STATIC] Char A(65): code=113, bits=8
[2025-07-31 21:43:35] [DEBUG_STATIC] Char B(66): code=114, bits=8
[2025-07-31 21:43:35] [DEBUG_STATIC] Char C(67): code=115, bits=8
[2025-07-31 21:43:35] [DEBUG_STATIC] Char D(68): code=116, bits=8
[2025-07-31 21:43:35] [DEBUG_STATIC] Char E(69): code=117, bits=8
[2025-07-31 21:43:35] [DEBUG_STATIC] Char F(70): code=118, bits=8
[2025-07-31 21:43:35] [DEBUG_STATIC] Char G(71): code=119, bits=8
[2025-07-31 21:43:35] [DEBUG_STATIC] Char H(72): code=120, bits=8
[2025-07-31 21:43:35] [DEBUG_STATIC] Char I(73): code=121, bits=8
[2025-07-31 21:43:35] [DEBUG_STATIC] Char J(74): code=122, bits=8
[2025-07-31 21:43:35] [DEBUG_STATIC] Char K(75): code=123, bits=8
[2025-07-31 21:43:35] [Huffman::createStaticLiteralTree] symbol=65 -> code=113 (8 bits) [0x71]
[2025-07-31 21:43:35] [Huffman::createStaticLiteralTree] symbol=70 -> code=118 (8 bits) [0x76]
[2025-07-31 21:43:35] [Huffman::createStaticDistanceTree] Creating static distance tree with 32 symbols, 5 bits each
[2025-07-31 21:43:35] [Huffman::calculateCodes] Starting RFC 1951 canonical Huffman code calculation for 32 symbols
[2025-07-31 21:43:35] [Huffman::calculateCodes] Step 1: Counting codes per bit length
[2025-07-31 21:43:35] [Huffman::calculateCodes] Code length counts: [5:32]
[2025-07-31 21:43:35] [Huffman::calculateCodes] Step 2: Calculating starting codes for each bit length
[2025-07-31 21:43:35] [Huffman::calculateCodes] Bit length 5: starting code=0 (32 symbols)
[2025-07-31 21:43:35] [Huffman::calculateCodes] Starting codes: [6:64, 7:128, 8:256, 9:512, 10:1024, 11:2048, 12:4096, 13:8192, 14:16384, 15:32768]
[2025-07-31 21:43:35] [Huffman::calculateCodes] Step 3: Assigning codes to symbols
[2025-07-31 21:43:35] [Huffman::calculateCodes] Code assignment complete: 32 codes assigned
[2025-07-31 21:43:35] [Huffman::createStaticDistanceTree] Distance tree created with codes 0-31
[2025-07-31 21:43:35] [Adler32::adler32] null buffer provided, returning initial value 1
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=0, strStart=0, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65536, windowSize=65536
[2025-07-31 21:43:35] [Adler32::adler32] Starting Adler32 calculation: initial=1, index=0, len=119
[2025-07-31 21:43:35] [Adler32::adler32] s1=1, s2=0
[2025-07-31 21:43:35] [Adler32::adler32] Initial s1=1, s2=0 from adler=1
[2025-07-31 21:43:35] [Adler32::adler32] Processing chunk 1: k=119 bytes, remaining l=0
[2025-07-31 21:43:35] [Adler32::adler32] 16-byte block: s1 1->1474 (+1473), s2 0->12495 (+12495)
[2025-07-31 21:43:35] [Adler32::adler32] 16-byte block: s1 1474->2899 (+1425), s2 12495->48136 (+35641)
[2025-07-31 21:43:35] [Adler32::adler32] 16-byte block: s1 2899->4337 (+1438), s2 48136->107008 (+58872)
[2025-07-31 21:43:35] [Adler32::adler32] 16-byte block: s1 4337->5810 (+1473), s2 107008->188879 (+81871)
[2025-07-31 21:43:35] [Adler32::adler32] 16-byte block: s1 5810->7235 (+1425), s2 188879->293896 (+105017)
[2025-07-31 21:43:35] [Adler32::adler32] 16-byte block: s1 7235->8673 (+1438), s2 293896->422144 (+128248)
[2025-07-31 21:43:35] [Adler32::adler32] 16-byte block: s1 8673->10146 (+1473), s2 422144->573391 (+151247)
[2025-07-31 21:43:35] [Adler32::adler32] Processing remaining 7 bytes individually
[2025-07-31 21:43:35] [Adler32::adler32] s1=10257, s2=583648, byte=111, index=112
[2025-07-31 21:43:35] [Adler32::adler32] s1=10289, s2=593937, byte=32, index=113
[2025-07-31 21:43:35] [Adler32::adler32] s1=10376, s2=604313, byte=87, index=114
[2025-07-31 21:43:35] [Adler32::adler32] s1=10487, s2=614800, byte=111, index=115
[2025-07-31 21:43:35] [Adler32::adler32] s1=10601, s2=625401, byte=114, index=116
[2025-07-31 21:43:35] [Adler32::adler32] s1=10709, s2=636110, byte=108, index=117
[2025-07-31 21:43:35] [Adler32::adler32] s1=10809, s2=646919, byte=100, index=118
[2025-07-31 21:43:35] [Adler32::adler32] Modulo operation: s1 10809->10809, s2 646919->57230 (mod 65521)
[2025-07-31 21:43:35] [Adler32::adler32] Final result: s1=10809, s2=57230, combined=3750636089 (0xdf8e2a39)
[2025-07-31 21:43:35] [DEBUG_FILL] readBuf returned 119 bytes, new lookAhead will be 119
[2025-07-31 21:43:35] [DEBUG_FILL] Read bytes: 72(H),101(e),108(l),108(l),111(o),32( ),87(W),111(o),114(r),108(l),100(d),32( ),72(H),101(e),108(l),108(l),111(o),32( ),87(W),111(o),114(r),108(l),100(d),32( ),72(H),101(e),108(l),108(l),111(o),32( ),87(W),111(o),114(r),108(l),100(d),32( ),72(H),101(e),108(l),108(l),111(o),32( ),87(W),111(o),114(r),108(l),100(d),32( ),72(H),101(e),108(l),108(l),111(o),32( ),87(W),111(o),114(r),108(l),100(d),32( ),72(H),101(e),108(l),108(l),111(o),32( ),87(W),111(o),114(r),108(l),100(d),32( ),72(H),101(e),108(l),108(l),111(o),32( ),87(W),111(o),114(r),108(l),100(d),32( ),72(H),101(e),108(l),108(l),111(o),32( ),87(W),111(o),114(r),108(l),100(d),32( ),72(H),101(e),108(l),108(l),111(o),32( ),87(W),111(o),114(r),108(l),100(d),32( ),72(H),101(e),108(l),108(l),111(o),32( ),87(W),111(o),114(r),108(l),100(d)
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) -> 72 [binary: 1001000 & 11111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(72, 5) -> 2304 [32-bit: 72 * 2^5 = 2304]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) -> 101 [binary: 1100101 & 11111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(2405, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(2405, 32767) -> 2405 [binary: 100101100101 & 111111111111111 = 100101100101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2405, 5) -> 76960 [32-bit: 2405 * 2^5 = 76960]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) -> 11468 [binary: 10010110011001100 & 111111111111111 = 10110011001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 32767) -> 0 [binary: 0 & 111111111111111 = 0]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=118, strStart=1, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(11468, 5) -> 366976 [32-bit: 11468 * 2^5 = 366976]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) -> 6636 [binary: 1011001100111101100 & 111111111111111 = 1100111101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(1, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(1, 32767) -> 1 [binary: 1 & 111111111111111 = 1]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[0]: 72 (char='H')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=72 (char='H'), lastLit=0
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 72 (char='H')
[2025-07-31 21:43:35] [BitwiseOps::and] and(1, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(1, 8191) -> 1 [binary: 1 & 1111111111111 = 1]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=117, strStart=2, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(6636, 5) -> 212352 [32-bit: 6636 * 2^5 = 212352]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) -> 15855 [binary: 110011110111101111 & 111111111111111 = 11110111101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(2, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(2, 32767) -> 2 [binary: 10 & 111111111111111 = 10]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[1]: 101 (char='e')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=101 (char='e'), lastLit=1
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 101 (char='e')
[2025-07-31 21:43:35] [BitwiseOps::and] and(2, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(2, 8191) -> 2 [binary: 10 & 1111111111111 = 10]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=116, strStart=3, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15855, 5) -> 507360 [32-bit: 15855 * 2^5 = 507360]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) -> 15808 [binary: 1111011110111000000 & 111111111111111 = 11110111000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(3, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(3, 32767) -> 3 [binary: 11 & 111111111111111 = 11]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[2]: 108 (char='l')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=108 (char='l'), lastLit=2
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 108 (char='l')
[2025-07-31 21:43:35] [BitwiseOps::and] and(3, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(3, 8191) -> 3 [binary: 11 & 1111111111111 = 11]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=115, strStart=4, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15808, 5) -> 505856 [32-bit: 15808 * 2^5 = 505856]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) -> 87 [binary: 1010111 & 11111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) -> 14423 [binary: 1111011100001010111 & 111111111111111 = 11100001010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(4, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(4, 32767) -> 4 [binary: 100 & 111111111111111 = 100]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[3]: 108 (char='l')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=108 (char='l'), lastLit=3
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 108 (char='l')
[2025-07-31 21:43:35] [BitwiseOps::and] and(4, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(4, 8191) -> 4 [binary: 100 & 1111111111111 = 100]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=114, strStart=5, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(14423, 5) -> 461536 [32-bit: 14423 * 2^5 = 461536]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) -> 2703 [binary: 1110000101010001111 & 111111111111111 = 101010001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(5, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(5, 32767) -> 5 [binary: 101 & 111111111111111 = 101]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[4]: 111 (char='o')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=111 (char='o'), lastLit=4
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 111 (char='o')
[2025-07-31 21:43:35] [BitwiseOps::and] and(5, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(5, 8191) -> 5 [binary: 101 & 1111111111111 = 101]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=113, strStart=6, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2703, 5) -> 86496 [32-bit: 2703 * 2^5 = 86496]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) -> 114 [binary: 1110010 & 11111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) -> 20882 [binary: 10101000110010010 & 111111111111111 = 101000110010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(6, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(6, 32767) -> 6 [binary: 110 & 111111111111111 = 110]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[5]: 32 (char=' ')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=32 (char=' '), lastLit=5
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 32 (char=' ')
[2025-07-31 21:43:35] [BitwiseOps::and] and(6, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(6, 8191) -> 6 [binary: 110 & 1111111111111 = 110]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=112, strStart=7, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(20882, 5) -> 668224 [32-bit: 20882 * 2^5 = 668224]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) -> 12844 [binary: 10100011001000101100 & 111111111111111 = 11001000101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(7, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(7, 32767) -> 7 [binary: 111 & 111111111111111 = 111]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[6]: 87 (char='W')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=87 (char='W'), lastLit=6
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 87 (char='W')
[2025-07-31 21:43:35] [BitwiseOps::and] and(7, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(7, 8191) -> 7 [binary: 111 & 1111111111111 = 111]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=111, strStart=8, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(12844, 5) -> 411008 [32-bit: 12844 * 2^5 = 411008]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) -> 100 [binary: 1100100 & 11111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) -> 17892 [binary: 1100100010111100100 & 111111111111111 = 100010111100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(8, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(8, 32767) -> 8 [binary: 1000 & 111111111111111 = 1000]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[7]: 111 (char='o')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=111 (char='o'), lastLit=7
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 111 (char='o')
[2025-07-31 21:43:35] [BitwiseOps::and] and(8, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(8, 8191) -> 8 [binary: 1000 & 1111111111111 = 1000]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=110, strStart=9, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(17892, 5) -> 572544 [32-bit: 17892 * 2^5 = 572544]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) -> 15520 [binary: 10001011110010100000 & 111111111111111 = 11110010100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(9, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(9, 32767) -> 9 [binary: 1001 & 111111111111111 = 1001]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[8]: 114 (char='r')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=114 (char='r'), lastLit=8
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 114 (char='r')
[2025-07-31 21:43:35] [BitwiseOps::and] and(9, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(9, 8191) -> 9 [binary: 1001 & 1111111111111 = 1001]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=109, strStart=10, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15520, 5) -> 496640 [32-bit: 15520 * 2^5 = 496640]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) -> 72 [binary: 1001000 & 11111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) -> 5192 [binary: 1111001010001001000 & 111111111111111 = 1010001001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(10, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(10, 32767) -> 10 [binary: 1010 & 111111111111111 = 1010]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[9]: 108 (char='l')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=108 (char='l'), lastLit=9
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 108 (char='l')
[2025-07-31 21:43:35] [BitwiseOps::and] and(10, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(10, 8191) -> 10 [binary: 1010 & 1111111111111 = 1010]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=108, strStart=11, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5192, 5) -> 166144 [32-bit: 5192 * 2^5 = 166144]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) -> 101 [binary: 1100101 & 11111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) -> 2405 [binary: 101000100101100101 & 111111111111111 = 100101100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(11, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(11, 32767) -> 11 [binary: 1011 & 111111111111111 = 1011]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[10]: 100 (char='d')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=100 (char='d'), lastLit=10
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 100 (char='d')
[2025-07-31 21:43:35] [BitwiseOps::and] and(11, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(11, 8191) -> 11 [binary: 1011 & 1111111111111 = 1011]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=107, strStart=12, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2405, 5) -> 76960 [32-bit: 2405 * 2^5 = 76960]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) -> 11468 [binary: 10010110011001100 & 111111111111111 = 10110011001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and(0, 65535) -> 0 [binary: 0 & 1111111111111111 = 0]
[2025-07-31 21:43:35] [BitwiseOps::and] and(12, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(12, 32767) -> 12 [binary: 1100 & 111111111111111 = 1100]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[11]: 32 (char=' ')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=32 (char=' '), lastLit=11
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 32 (char=' ')
[2025-07-31 21:43:35] [BitwiseOps::and] and(12, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(12, 8191) -> 12 [binary: 1100 & 1111111111111 = 1100]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=106, strStart=13, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(11468, 5) -> 366976 [32-bit: 11468 * 2^5 = 366976]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) -> 6636 [binary: 1011001100111101100 & 111111111111111 = 1100111101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(1, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(1, 65535) -> 1 [binary: 1 & 1111111111111111 = 1]
[2025-07-31 21:43:35] [BitwiseOps::and] and(13, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(13, 32767) -> 13 [binary: 1101 & 111111111111111 = 1101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(12, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(12, 65535) -> 12 [binary: 1100 & 1111111111111111 = 1100]
[2025-07-31 21:43:35] [DEBUG_SLOW] Processing literal from window[12]: 72 (char='H')
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=0, lc=72 (char='H'), lastLit=12
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording literal: 72 (char='H')
[2025-07-31 21:43:35] [BitwiseOps::and] and(13, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(13, 8191) -> 13 [binary: 1101 & 1111111111111 = 1101]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=105, strStart=14, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(6636, 5) -> 212352 [32-bit: 6636 * 2^5 = 212352]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) -> 15855 [binary: 110011110111101111 & 111111111111111 = 11110111101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(2, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(2, 65535) -> 2 [binary: 10 & 1111111111111111 = 10]
[2025-07-31 21:43:35] [BitwiseOps::and] and(14, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(14, 32767) -> 14 [binary: 1110 & 111111111111111 = 1110]
[2025-07-31 21:43:35] [DEBUG_TALLY] trTally called: dist=12, lc=103 (char='g'), lastLit=13
[2025-07-31 21:43:35] [DEBUG_TALLY] Recording match: dist=12, lc=103
[2025-07-31 21:43:35] [BitwiseOps::and] and(14, 8191) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(14, 8191) -> 14 [binary: 1110 & 1111111111111 = 1110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15855, 5) -> 507360 [32-bit: 15855 * 2^5 = 507360]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) -> 15808 [binary: 1111011110111000000 & 111111111111111 = 11110111000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(3, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(3, 65535) -> 3 [binary: 11 & 1111111111111111 = 11]
[2025-07-31 21:43:35] [BitwiseOps::and] and(15, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(15, 32767) -> 15 [binary: 1111 & 111111111111111 = 1111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15808, 5) -> 505856 [32-bit: 15808 * 2^5 = 505856]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) -> 87 [binary: 1010111 & 11111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) -> 14423 [binary: 1111011100001010111 & 111111111111111 = 11100001010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(4, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(4, 65535) -> 4 [binary: 100 & 1111111111111111 = 100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(16, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(16, 32767) -> 16 [binary: 10000 & 111111111111111 = 10000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(14423, 5) -> 461536 [32-bit: 14423 * 2^5 = 461536]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) -> 2703 [binary: 1110000101010001111 & 111111111111111 = 101010001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(5, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(5, 65535) -> 5 [binary: 101 & 1111111111111111 = 101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(17, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(17, 32767) -> 17 [binary: 10001 & 111111111111111 = 10001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2703, 5) -> 86496 [32-bit: 2703 * 2^5 = 86496]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) -> 114 [binary: 1110010 & 11111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) -> 20882 [binary: 10101000110010010 & 111111111111111 = 101000110010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(6, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(6, 65535) -> 6 [binary: 110 & 1111111111111111 = 110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(18, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(18, 32767) -> 18 [binary: 10010 & 111111111111111 = 10010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(20882, 5) -> 668224 [32-bit: 20882 * 2^5 = 668224]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) -> 12844 [binary: 10100011001000101100 & 111111111111111 = 11001000101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(7, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(7, 65535) -> 7 [binary: 111 & 1111111111111111 = 111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(19, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(19, 32767) -> 19 [binary: 10011 & 111111111111111 = 10011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(12844, 5) -> 411008 [32-bit: 12844 * 2^5 = 411008]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) -> 100 [binary: 1100100 & 11111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) -> 17892 [binary: 1100100010111100100 & 111111111111111 = 100010111100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(8, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(8, 65535) -> 8 [binary: 1000 & 1111111111111111 = 1000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(20, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(20, 32767) -> 20 [binary: 10100 & 111111111111111 = 10100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(17892, 5) -> 572544 [32-bit: 17892 * 2^5 = 572544]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) -> 15520 [binary: 10001011110010100000 & 111111111111111 = 11110010100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(9, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(9, 65535) -> 9 [binary: 1001 & 1111111111111111 = 1001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(21, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(21, 32767) -> 21 [binary: 10101 & 111111111111111 = 10101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15520, 5) -> 496640 [32-bit: 15520 * 2^5 = 496640]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) -> 72 [binary: 1001000 & 11111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) -> 5192 [binary: 1111001010001001000 & 111111111111111 = 1010001001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(10, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(10, 65535) -> 10 [binary: 1010 & 1111111111111111 = 1010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(22, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(22, 32767) -> 22 [binary: 10110 & 111111111111111 = 10110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5192, 5) -> 166144 [32-bit: 5192 * 2^5 = 166144]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) -> 101 [binary: 1100101 & 11111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) -> 2405 [binary: 101000100101100101 & 111111111111111 = 100101100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(11, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(11, 65535) -> 11 [binary: 1011 & 1111111111111111 = 1011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(23, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(23, 32767) -> 23 [binary: 10111 & 111111111111111 = 10111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2405, 5) -> 76960 [32-bit: 2405 * 2^5 = 76960]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) -> 11468 [binary: 10010110011001100 & 111111111111111 = 10110011001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(12, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(12, 65535) -> 12 [binary: 1100 & 1111111111111111 = 1100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(24, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(24, 32767) -> 24 [binary: 11000 & 111111111111111 = 11000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(11468, 5) -> 366976 [32-bit: 11468 * 2^5 = 366976]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) -> 6636 [binary: 1011001100111101100 & 111111111111111 = 1100111101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(13, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(13, 65535) -> 13 [binary: 1101 & 1111111111111111 = 1101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(25, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(25, 32767) -> 25 [binary: 11001 & 111111111111111 = 11001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(6636, 5) -> 212352 [32-bit: 6636 * 2^5 = 212352]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) -> 15855 [binary: 110011110111101111 & 111111111111111 = 11110111101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(14, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(14, 65535) -> 14 [binary: 1110 & 1111111111111111 = 1110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(26, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(26, 32767) -> 26 [binary: 11010 & 111111111111111 = 11010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15855, 5) -> 507360 [32-bit: 15855 * 2^5 = 507360]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) -> 15808 [binary: 1111011110111000000 & 111111111111111 = 11110111000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(15, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(15, 65535) -> 15 [binary: 1111 & 1111111111111111 = 1111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(27, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(27, 32767) -> 27 [binary: 11011 & 111111111111111 = 11011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15808, 5) -> 505856 [32-bit: 15808 * 2^5 = 505856]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) -> 87 [binary: 1010111 & 11111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) -> 14423 [binary: 1111011100001010111 & 111111111111111 = 11100001010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(16, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(16, 65535) -> 16 [binary: 10000 & 1111111111111111 = 10000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(28, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(28, 32767) -> 28 [binary: 11100 & 111111111111111 = 11100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(14423, 5) -> 461536 [32-bit: 14423 * 2^5 = 461536]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) -> 2703 [binary: 1110000101010001111 & 111111111111111 = 101010001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(17, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(17, 65535) -> 17 [binary: 10001 & 1111111111111111 = 10001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(29, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(29, 32767) -> 29 [binary: 11101 & 111111111111111 = 11101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2703, 5) -> 86496 [32-bit: 2703 * 2^5 = 86496]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) -> 114 [binary: 1110010 & 11111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) -> 20882 [binary: 10101000110010010 & 111111111111111 = 101000110010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(18, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(18, 65535) -> 18 [binary: 10010 & 1111111111111111 = 10010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(30, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(30, 32767) -> 30 [binary: 11110 & 111111111111111 = 11110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(20882, 5) -> 668224 [32-bit: 20882 * 2^5 = 668224]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) -> 12844 [binary: 10100011001000101100 & 111111111111111 = 11001000101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(19, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(19, 65535) -> 19 [binary: 10011 & 1111111111111111 = 10011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(31, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(31, 32767) -> 31 [binary: 11111 & 111111111111111 = 11111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(12844, 5) -> 411008 [32-bit: 12844 * 2^5 = 411008]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) -> 100 [binary: 1100100 & 11111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) -> 17892 [binary: 1100100010111100100 & 111111111111111 = 100010111100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(20, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(20, 65535) -> 20 [binary: 10100 & 1111111111111111 = 10100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 32767) -> 32 [binary: 100000 & 111111111111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(17892, 5) -> 572544 [32-bit: 17892 * 2^5 = 572544]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) -> 15520 [binary: 10001011110010100000 & 111111111111111 = 11110010100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(21, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(21, 65535) -> 21 [binary: 10101 & 1111111111111111 = 10101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(33, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(33, 32767) -> 33 [binary: 100001 & 111111111111111 = 100001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15520, 5) -> 496640 [32-bit: 15520 * 2^5 = 496640]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) -> 72 [binary: 1001000 & 11111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) -> 5192 [binary: 1111001010001001000 & 111111111111111 = 1010001001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(22, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(22, 65535) -> 22 [binary: 10110 & 1111111111111111 = 10110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(34, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(34, 32767) -> 34 [binary: 100010 & 111111111111111 = 100010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5192, 5) -> 166144 [32-bit: 5192 * 2^5 = 166144]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) -> 101 [binary: 1100101 & 11111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) -> 2405 [binary: 101000100101100101 & 111111111111111 = 100101100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(23, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(23, 65535) -> 23 [binary: 10111 & 1111111111111111 = 10111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(35, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(35, 32767) -> 35 [binary: 100011 & 111111111111111 = 100011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2405, 5) -> 76960 [32-bit: 2405 * 2^5 = 76960]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) -> 11468 [binary: 10010110011001100 & 111111111111111 = 10110011001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(24, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(24, 65535) -> 24 [binary: 11000 & 1111111111111111 = 11000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(36, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(36, 32767) -> 36 [binary: 100100 & 111111111111111 = 100100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(11468, 5) -> 366976 [32-bit: 11468 * 2^5 = 366976]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) -> 6636 [binary: 1011001100111101100 & 111111111111111 = 1100111101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(25, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(25, 65535) -> 25 [binary: 11001 & 1111111111111111 = 11001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(37, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(37, 32767) -> 37 [binary: 100101 & 111111111111111 = 100101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(6636, 5) -> 212352 [32-bit: 6636 * 2^5 = 212352]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) -> 15855 [binary: 110011110111101111 & 111111111111111 = 11110111101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(26, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(26, 65535) -> 26 [binary: 11010 & 1111111111111111 = 11010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(38, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(38, 32767) -> 38 [binary: 100110 & 111111111111111 = 100110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15855, 5) -> 507360 [32-bit: 15855 * 2^5 = 507360]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) -> 15808 [binary: 1111011110111000000 & 111111111111111 = 11110111000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(27, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(27, 65535) -> 27 [binary: 11011 & 1111111111111111 = 11011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(39, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(39, 32767) -> 39 [binary: 100111 & 111111111111111 = 100111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15808, 5) -> 505856 [32-bit: 15808 * 2^5 = 505856]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) -> 87 [binary: 1010111 & 11111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) -> 14423 [binary: 1111011100001010111 & 111111111111111 = 11100001010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(28, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(28, 65535) -> 28 [binary: 11100 & 1111111111111111 = 11100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(40, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(40, 32767) -> 40 [binary: 101000 & 111111111111111 = 101000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(14423, 5) -> 461536 [32-bit: 14423 * 2^5 = 461536]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) -> 2703 [binary: 1110000101010001111 & 111111111111111 = 101010001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(29, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(29, 65535) -> 29 [binary: 11101 & 1111111111111111 = 11101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(41, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(41, 32767) -> 41 [binary: 101001 & 111111111111111 = 101001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2703, 5) -> 86496 [32-bit: 2703 * 2^5 = 86496]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) -> 114 [binary: 1110010 & 11111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) -> 20882 [binary: 10101000110010010 & 111111111111111 = 101000110010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(30, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(30, 65535) -> 30 [binary: 11110 & 1111111111111111 = 11110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(42, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(42, 32767) -> 42 [binary: 101010 & 111111111111111 = 101010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(20882, 5) -> 668224 [32-bit: 20882 * 2^5 = 668224]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) -> 12844 [binary: 10100011001000101100 & 111111111111111 = 11001000101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(31, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(31, 65535) -> 31 [binary: 11111 & 1111111111111111 = 11111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(43, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(43, 32767) -> 43 [binary: 101011 & 111111111111111 = 101011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(12844, 5) -> 411008 [32-bit: 12844 * 2^5 = 411008]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) -> 100 [binary: 1100100 & 11111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) -> 17892 [binary: 1100100010111100100 & 111111111111111 = 100010111100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 65535) -> 32 [binary: 100000 & 1111111111111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(44, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(44, 32767) -> 44 [binary: 101100 & 111111111111111 = 101100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(17892, 5) -> 572544 [32-bit: 17892 * 2^5 = 572544]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) -> 15520 [binary: 10001011110010100000 & 111111111111111 = 11110010100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(33, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(33, 65535) -> 33 [binary: 100001 & 1111111111111111 = 100001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(45, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(45, 32767) -> 45 [binary: 101101 & 111111111111111 = 101101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15520, 5) -> 496640 [32-bit: 15520 * 2^5 = 496640]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) -> 72 [binary: 1001000 & 11111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) -> 5192 [binary: 1111001010001001000 & 111111111111111 = 1010001001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(34, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(34, 65535) -> 34 [binary: 100010 & 1111111111111111 = 100010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(46, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(46, 32767) -> 46 [binary: 101110 & 111111111111111 = 101110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5192, 5) -> 166144 [32-bit: 5192 * 2^5 = 166144]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) -> 101 [binary: 1100101 & 11111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) -> 2405 [binary: 101000100101100101 & 111111111111111 = 100101100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(35, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(35, 65535) -> 35 [binary: 100011 & 1111111111111111 = 100011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(47, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(47, 32767) -> 47 [binary: 101111 & 111111111111111 = 101111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2405, 5) -> 76960 [32-bit: 2405 * 2^5 = 76960]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) -> 11468 [binary: 10010110011001100 & 111111111111111 = 10110011001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(36, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(36, 65535) -> 36 [binary: 100100 & 1111111111111111 = 100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(48, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(48, 32767) -> 48 [binary: 110000 & 111111111111111 = 110000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(11468, 5) -> 366976 [32-bit: 11468 * 2^5 = 366976]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) -> 6636 [binary: 1011001100111101100 & 111111111111111 = 1100111101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(37, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(37, 65535) -> 37 [binary: 100101 & 1111111111111111 = 100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(49, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(49, 32767) -> 49 [binary: 110001 & 111111111111111 = 110001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(6636, 5) -> 212352 [32-bit: 6636 * 2^5 = 212352]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) -> 15855 [binary: 110011110111101111 & 111111111111111 = 11110111101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(38, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(38, 65535) -> 38 [binary: 100110 & 1111111111111111 = 100110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(50, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(50, 32767) -> 50 [binary: 110010 & 111111111111111 = 110010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15855, 5) -> 507360 [32-bit: 15855 * 2^5 = 507360]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) -> 15808 [binary: 1111011110111000000 & 111111111111111 = 11110111000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(39, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(39, 65535) -> 39 [binary: 100111 & 1111111111111111 = 100111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(51, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(51, 32767) -> 51 [binary: 110011 & 111111111111111 = 110011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15808, 5) -> 505856 [32-bit: 15808 * 2^5 = 505856]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) -> 87 [binary: 1010111 & 11111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) -> 14423 [binary: 1111011100001010111 & 111111111111111 = 11100001010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(40, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(40, 65535) -> 40 [binary: 101000 & 1111111111111111 = 101000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(52, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(52, 32767) -> 52 [binary: 110100 & 111111111111111 = 110100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(14423, 5) -> 461536 [32-bit: 14423 * 2^5 = 461536]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) -> 2703 [binary: 1110000101010001111 & 111111111111111 = 101010001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(41, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(41, 65535) -> 41 [binary: 101001 & 1111111111111111 = 101001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(53, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(53, 32767) -> 53 [binary: 110101 & 111111111111111 = 110101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2703, 5) -> 86496 [32-bit: 2703 * 2^5 = 86496]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) -> 114 [binary: 1110010 & 11111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) -> 20882 [binary: 10101000110010010 & 111111111111111 = 101000110010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(42, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(42, 65535) -> 42 [binary: 101010 & 1111111111111111 = 101010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(54, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(54, 32767) -> 54 [binary: 110110 & 111111111111111 = 110110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(20882, 5) -> 668224 [32-bit: 20882 * 2^5 = 668224]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) -> 12844 [binary: 10100011001000101100 & 111111111111111 = 11001000101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(43, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(43, 65535) -> 43 [binary: 101011 & 1111111111111111 = 101011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(55, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(55, 32767) -> 55 [binary: 110111 & 111111111111111 = 110111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(12844, 5) -> 411008 [32-bit: 12844 * 2^5 = 411008]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) -> 100 [binary: 1100100 & 11111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) -> 17892 [binary: 1100100010111100100 & 111111111111111 = 100010111100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(44, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(44, 65535) -> 44 [binary: 101100 & 1111111111111111 = 101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(56, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(56, 32767) -> 56 [binary: 111000 & 111111111111111 = 111000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(17892, 5) -> 572544 [32-bit: 17892 * 2^5 = 572544]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) -> 15520 [binary: 10001011110010100000 & 111111111111111 = 11110010100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(45, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(45, 65535) -> 45 [binary: 101101 & 1111111111111111 = 101101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(57, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(57, 32767) -> 57 [binary: 111001 & 111111111111111 = 111001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15520, 5) -> 496640 [32-bit: 15520 * 2^5 = 496640]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) -> 72 [binary: 1001000 & 11111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) -> 5192 [binary: 1111001010001001000 & 111111111111111 = 1010001001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(46, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(46, 65535) -> 46 [binary: 101110 & 1111111111111111 = 101110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(58, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(58, 32767) -> 58 [binary: 111010 & 111111111111111 = 111010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5192, 5) -> 166144 [32-bit: 5192 * 2^5 = 166144]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) -> 101 [binary: 1100101 & 11111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) -> 2405 [binary: 101000100101100101 & 111111111111111 = 100101100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(47, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(47, 65535) -> 47 [binary: 101111 & 1111111111111111 = 101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(59, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(59, 32767) -> 59 [binary: 111011 & 111111111111111 = 111011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2405, 5) -> 76960 [32-bit: 2405 * 2^5 = 76960]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) -> 11468 [binary: 10010110011001100 & 111111111111111 = 10110011001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(48, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(48, 65535) -> 48 [binary: 110000 & 1111111111111111 = 110000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(60, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(60, 32767) -> 60 [binary: 111100 & 111111111111111 = 111100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(11468, 5) -> 366976 [32-bit: 11468 * 2^5 = 366976]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) -> 6636 [binary: 1011001100111101100 & 111111111111111 = 1100111101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(49, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(49, 65535) -> 49 [binary: 110001 & 1111111111111111 = 110001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(61, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(61, 32767) -> 61 [binary: 111101 & 111111111111111 = 111101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(6636, 5) -> 212352 [32-bit: 6636 * 2^5 = 212352]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) -> 15855 [binary: 110011110111101111 & 111111111111111 = 11110111101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(50, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(50, 65535) -> 50 [binary: 110010 & 1111111111111111 = 110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(62, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(62, 32767) -> 62 [binary: 111110 & 111111111111111 = 111110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15855, 5) -> 507360 [32-bit: 15855 * 2^5 = 507360]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) -> 15808 [binary: 1111011110111000000 & 111111111111111 = 11110111000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(51, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(51, 65535) -> 51 [binary: 110011 & 1111111111111111 = 110011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(63, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(63, 32767) -> 63 [binary: 111111 & 111111111111111 = 111111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15808, 5) -> 505856 [32-bit: 15808 * 2^5 = 505856]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) -> 87 [binary: 1010111 & 11111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) -> 14423 [binary: 1111011100001010111 & 111111111111111 = 11100001010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(52, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(52, 65535) -> 52 [binary: 110100 & 1111111111111111 = 110100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(64, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(64, 32767) -> 64 [binary: 1000000 & 111111111111111 = 1000000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(14423, 5) -> 461536 [32-bit: 14423 * 2^5 = 461536]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) -> 2703 [binary: 1110000101010001111 & 111111111111111 = 101010001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(53, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(53, 65535) -> 53 [binary: 110101 & 1111111111111111 = 110101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(65, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(65, 32767) -> 65 [binary: 1000001 & 111111111111111 = 1000001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2703, 5) -> 86496 [32-bit: 2703 * 2^5 = 86496]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) -> 114 [binary: 1110010 & 11111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) -> 20882 [binary: 10101000110010010 & 111111111111111 = 101000110010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(54, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(54, 65535) -> 54 [binary: 110110 & 1111111111111111 = 110110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(66, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(66, 32767) -> 66 [binary: 1000010 & 111111111111111 = 1000010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(20882, 5) -> 668224 [32-bit: 20882 * 2^5 = 668224]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) -> 12844 [binary: 10100011001000101100 & 111111111111111 = 11001000101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(55, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(55, 65535) -> 55 [binary: 110111 & 1111111111111111 = 110111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(67, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(67, 32767) -> 67 [binary: 1000011 & 111111111111111 = 1000011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(12844, 5) -> 411008 [32-bit: 12844 * 2^5 = 411008]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) -> 100 [binary: 1100100 & 11111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) -> 17892 [binary: 1100100010111100100 & 111111111111111 = 100010111100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(56, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(56, 65535) -> 56 [binary: 111000 & 1111111111111111 = 111000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(68, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(68, 32767) -> 68 [binary: 1000100 & 111111111111111 = 1000100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(17892, 5) -> 572544 [32-bit: 17892 * 2^5 = 572544]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) -> 15520 [binary: 10001011110010100000 & 111111111111111 = 11110010100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(57, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(57, 65535) -> 57 [binary: 111001 & 1111111111111111 = 111001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(69, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(69, 32767) -> 69 [binary: 1000101 & 111111111111111 = 1000101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15520, 5) -> 496640 [32-bit: 15520 * 2^5 = 496640]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) -> 72 [binary: 1001000 & 11111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) -> 5192 [binary: 1111001010001001000 & 111111111111111 = 1010001001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(58, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(58, 65535) -> 58 [binary: 111010 & 1111111111111111 = 111010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(70, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(70, 32767) -> 70 [binary: 1000110 & 111111111111111 = 1000110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5192, 5) -> 166144 [32-bit: 5192 * 2^5 = 166144]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) -> 101 [binary: 1100101 & 11111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) -> 2405 [binary: 101000100101100101 & 111111111111111 = 100101100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(59, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(59, 65535) -> 59 [binary: 111011 & 1111111111111111 = 111011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(71, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(71, 32767) -> 71 [binary: 1000111 & 111111111111111 = 1000111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2405, 5) -> 76960 [32-bit: 2405 * 2^5 = 76960]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) -> 11468 [binary: 10010110011001100 & 111111111111111 = 10110011001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(60, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(60, 65535) -> 60 [binary: 111100 & 1111111111111111 = 111100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 32767) -> 72 [binary: 1001000 & 111111111111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(11468, 5) -> 366976 [32-bit: 11468 * 2^5 = 366976]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) -> 6636 [binary: 1011001100111101100 & 111111111111111 = 1100111101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(61, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(61, 65535) -> 61 [binary: 111101 & 1111111111111111 = 111101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(73, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(73, 32767) -> 73 [binary: 1001001 & 111111111111111 = 1001001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(6636, 5) -> 212352 [32-bit: 6636 * 2^5 = 212352]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) -> 15855 [binary: 110011110111101111 & 111111111111111 = 11110111101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(62, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(62, 65535) -> 62 [binary: 111110 & 1111111111111111 = 111110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(74, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(74, 32767) -> 74 [binary: 1001010 & 111111111111111 = 1001010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15855, 5) -> 507360 [32-bit: 15855 * 2^5 = 507360]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) -> 15808 [binary: 1111011110111000000 & 111111111111111 = 11110111000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(63, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(63, 65535) -> 63 [binary: 111111 & 1111111111111111 = 111111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(75, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(75, 32767) -> 75 [binary: 1001011 & 111111111111111 = 1001011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15808, 5) -> 505856 [32-bit: 15808 * 2^5 = 505856]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) -> 87 [binary: 1010111 & 11111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) -> 14423 [binary: 1111011100001010111 & 111111111111111 = 11100001010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(64, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(64, 65535) -> 64 [binary: 1000000 & 1111111111111111 = 1000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(76, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(76, 32767) -> 76 [binary: 1001100 & 111111111111111 = 1001100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(14423, 5) -> 461536 [32-bit: 14423 * 2^5 = 461536]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) -> 2703 [binary: 1110000101010001111 & 111111111111111 = 101010001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(65, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(65, 65535) -> 65 [binary: 1000001 & 1111111111111111 = 1000001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77, 32767) -> 77 [binary: 1001101 & 111111111111111 = 1001101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2703, 5) -> 86496 [32-bit: 2703 * 2^5 = 86496]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) -> 114 [binary: 1110010 & 11111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) -> 20882 [binary: 10101000110010010 & 111111111111111 = 101000110010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(66, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(66, 65535) -> 66 [binary: 1000010 & 1111111111111111 = 1000010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(78, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(78, 32767) -> 78 [binary: 1001110 & 111111111111111 = 1001110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(20882, 5) -> 668224 [32-bit: 20882 * 2^5 = 668224]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) -> 12844 [binary: 10100011001000101100 & 111111111111111 = 11001000101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(67, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(67, 65535) -> 67 [binary: 1000011 & 1111111111111111 = 1000011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(79, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(79, 32767) -> 79 [binary: 1001111 & 111111111111111 = 1001111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(12844, 5) -> 411008 [32-bit: 12844 * 2^5 = 411008]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) -> 100 [binary: 1100100 & 11111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) -> 17892 [binary: 1100100010111100100 & 111111111111111 = 100010111100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(68, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(68, 65535) -> 68 [binary: 1000100 & 1111111111111111 = 1000100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(80, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(80, 32767) -> 80 [binary: 1010000 & 111111111111111 = 1010000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(17892, 5) -> 572544 [32-bit: 17892 * 2^5 = 572544]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) -> 15520 [binary: 10001011110010100000 & 111111111111111 = 11110010100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(69, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(69, 65535) -> 69 [binary: 1000101 & 1111111111111111 = 1000101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(81, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(81, 32767) -> 81 [binary: 1010001 & 111111111111111 = 1010001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15520, 5) -> 496640 [32-bit: 15520 * 2^5 = 496640]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) -> 72 [binary: 1001000 & 11111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) -> 5192 [binary: 1111001010001001000 & 111111111111111 = 1010001001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(70, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(70, 65535) -> 70 [binary: 1000110 & 1111111111111111 = 1000110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(82, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(82, 32767) -> 82 [binary: 1010010 & 111111111111111 = 1010010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5192, 5) -> 166144 [32-bit: 5192 * 2^5 = 166144]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) -> 101 [binary: 1100101 & 11111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) -> 2405 [binary: 101000100101100101 & 111111111111111 = 100101100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(71, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(71, 65535) -> 71 [binary: 1000111 & 1111111111111111 = 1000111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(83, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(83, 32767) -> 83 [binary: 1010011 & 111111111111111 = 1010011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2405, 5) -> 76960 [32-bit: 2405 * 2^5 = 76960]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) -> 11468 [binary: 10010110011001100 & 111111111111111 = 10110011001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 65535) -> 72 [binary: 1001000 & 1111111111111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(84, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(84, 32767) -> 84 [binary: 1010100 & 111111111111111 = 1010100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(11468, 5) -> 366976 [32-bit: 11468 * 2^5 = 366976]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) -> 6636 [binary: 1011001100111101100 & 111111111111111 = 1100111101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(73, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(73, 65535) -> 73 [binary: 1001001 & 1111111111111111 = 1001001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(85, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(85, 32767) -> 85 [binary: 1010101 & 111111111111111 = 1010101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(6636, 5) -> 212352 [32-bit: 6636 * 2^5 = 212352]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) -> 15855 [binary: 110011110111101111 & 111111111111111 = 11110111101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(74, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(74, 65535) -> 74 [binary: 1001010 & 1111111111111111 = 1001010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86, 32767) -> 86 [binary: 1010110 & 111111111111111 = 1010110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15855, 5) -> 507360 [32-bit: 15855 * 2^5 = 507360]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) -> 15808 [binary: 1111011110111000000 & 111111111111111 = 11110111000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(75, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(75, 65535) -> 75 [binary: 1001011 & 1111111111111111 = 1001011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 32767) -> 87 [binary: 1010111 & 111111111111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15808, 5) -> 505856 [32-bit: 15808 * 2^5 = 505856]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) -> 87 [binary: 1010111 & 11111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) -> 14423 [binary: 1111011100001010111 & 111111111111111 = 11100001010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(76, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(76, 65535) -> 76 [binary: 1001100 & 1111111111111111 = 1001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(88, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(88, 32767) -> 88 [binary: 1011000 & 111111111111111 = 1011000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(14423, 5) -> 461536 [32-bit: 14423 * 2^5 = 461536]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) -> 2703 [binary: 1110000101010001111 & 111111111111111 = 101010001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77, 65535) -> 77 [binary: 1001101 & 1111111111111111 = 1001101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(89, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(89, 32767) -> 89 [binary: 1011001 & 111111111111111 = 1011001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2703, 5) -> 86496 [32-bit: 2703 * 2^5 = 86496]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) -> 114 [binary: 1110010 & 11111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) -> 20882 [binary: 10101000110010010 & 111111111111111 = 101000110010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(78, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(78, 65535) -> 78 [binary: 1001110 & 1111111111111111 = 1001110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(90, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(90, 32767) -> 90 [binary: 1011010 & 111111111111111 = 1011010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(20882, 5) -> 668224 [32-bit: 20882 * 2^5 = 668224]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) -> 12844 [binary: 10100011001000101100 & 111111111111111 = 11001000101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(79, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(79, 65535) -> 79 [binary: 1001111 & 1111111111111111 = 1001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(91, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(91, 32767) -> 91 [binary: 1011011 & 111111111111111 = 1011011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(12844, 5) -> 411008 [32-bit: 12844 * 2^5 = 411008]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) -> 100 [binary: 1100100 & 11111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) -> 17892 [binary: 1100100010111100100 & 111111111111111 = 100010111100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(80, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(80, 65535) -> 80 [binary: 1010000 & 1111111111111111 = 1010000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(92, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(92, 32767) -> 92 [binary: 1011100 & 111111111111111 = 1011100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(17892, 5) -> 572544 [32-bit: 17892 * 2^5 = 572544]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) -> 15520 [binary: 10001011110010100000 & 111111111111111 = 11110010100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(81, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(81, 65535) -> 81 [binary: 1010001 & 1111111111111111 = 1010001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(93, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(93, 32767) -> 93 [binary: 1011101 & 111111111111111 = 1011101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15520, 5) -> 496640 [32-bit: 15520 * 2^5 = 496640]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) -> 72 [binary: 1001000 & 11111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) -> 5192 [binary: 1111001010001001000 & 111111111111111 = 1010001001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(82, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(82, 65535) -> 82 [binary: 1010010 & 1111111111111111 = 1010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(94, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(94, 32767) -> 94 [binary: 1011110 & 111111111111111 = 1011110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5192, 5) -> 166144 [32-bit: 5192 * 2^5 = 166144]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) -> 101 [binary: 1100101 & 11111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) -> 2405 [binary: 101000100101100101 & 111111111111111 = 100101100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(83, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(83, 65535) -> 83 [binary: 1010011 & 1111111111111111 = 1010011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(95, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(95, 32767) -> 95 [binary: 1011111 & 111111111111111 = 1011111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2405, 5) -> 76960 [32-bit: 2405 * 2^5 = 76960]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) -> 11468 [binary: 10010110011001100 & 111111111111111 = 10110011001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(84, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(84, 65535) -> 84 [binary: 1010100 & 1111111111111111 = 1010100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(96, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(96, 32767) -> 96 [binary: 1100000 & 111111111111111 = 1100000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(11468, 5) -> 366976 [32-bit: 11468 * 2^5 = 366976]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) -> 6636 [binary: 1011001100111101100 & 111111111111111 = 1100111101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(85, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(85, 65535) -> 85 [binary: 1010101 & 1111111111111111 = 1010101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(97, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(97, 32767) -> 97 [binary: 1100001 & 111111111111111 = 1100001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(6636, 5) -> 212352 [32-bit: 6636 * 2^5 = 212352]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) -> 15855 [binary: 110011110111101111 & 111111111111111 = 11110111101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86, 65535) -> 86 [binary: 1010110 & 1111111111111111 = 1010110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(98, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(98, 32767) -> 98 [binary: 1100010 & 111111111111111 = 1100010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15855, 5) -> 507360 [32-bit: 15855 * 2^5 = 507360]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) -> 15808 [binary: 1111011110111000000 & 111111111111111 = 11110111000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 65535) -> 87 [binary: 1010111 & 1111111111111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(99, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(99, 32767) -> 99 [binary: 1100011 & 111111111111111 = 1100011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15808, 5) -> 505856 [32-bit: 15808 * 2^5 = 505856]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) -> 87 [binary: 1010111 & 11111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) -> 14423 [binary: 1111011100001010111 & 111111111111111 = 11100001010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(88, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(88, 65535) -> 88 [binary: 1011000 & 1111111111111111 = 1011000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 32767) -> 100 [binary: 1100100 & 111111111111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(14423, 5) -> 461536 [32-bit: 14423 * 2^5 = 461536]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) -> 2703 [binary: 1110000101010001111 & 111111111111111 = 101010001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(89, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(89, 65535) -> 89 [binary: 1011001 & 1111111111111111 = 1011001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 32767) -> 101 [binary: 1100101 & 111111111111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2703, 5) -> 86496 [32-bit: 2703 * 2^5 = 86496]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) -> 114 [binary: 1110010 & 11111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) -> 20882 [binary: 10101000110010010 & 111111111111111 = 101000110010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(90, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(90, 65535) -> 90 [binary: 1011010 & 1111111111111111 = 1011010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(102, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(102, 32767) -> 102 [binary: 1100110 & 111111111111111 = 1100110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(20882, 5) -> 668224 [32-bit: 20882 * 2^5 = 668224]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) -> 12844 [binary: 10100011001000101100 & 111111111111111 = 11001000101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(91, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(91, 65535) -> 91 [binary: 1011011 & 1111111111111111 = 1011011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(103, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(103, 32767) -> 103 [binary: 1100111 & 111111111111111 = 1100111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(12844, 5) -> 411008 [32-bit: 12844 * 2^5 = 411008]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) -> 100 [binary: 1100100 & 11111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) -> 17892 [binary: 1100100010111100100 & 111111111111111 = 100010111100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(92, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(92, 65535) -> 92 [binary: 1011100 & 1111111111111111 = 1011100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(104, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(104, 32767) -> 104 [binary: 1101000 & 111111111111111 = 1101000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(17892, 5) -> 572544 [32-bit: 17892 * 2^5 = 572544]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(572576, 32767) -> 15520 [binary: 10001011110010100000 & 111111111111111 = 11110010100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(93, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(93, 65535) -> 93 [binary: 1011101 & 1111111111111111 = 1011101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(105, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(105, 32767) -> 105 [binary: 1101001 & 111111111111111 = 1101001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15520, 5) -> 496640 [32-bit: 15520 * 2^5 = 496640]
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(72, 255) -> 72 [binary: 1001000 & 11111111 = 1001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(496712, 32767) -> 5192 [binary: 1111001010001001000 & 111111111111111 = 1010001001000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(94, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(94, 65535) -> 94 [binary: 1011110 & 1111111111111111 = 1011110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(106, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(106, 32767) -> 106 [binary: 1101010 & 111111111111111 = 1101010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5192, 5) -> 166144 [32-bit: 5192 * 2^5 = 166144]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 255) -> 101 [binary: 1100101 & 11111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(166245, 32767) -> 2405 [binary: 101000100101100101 & 111111111111111 = 100101100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(95, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(95, 65535) -> 95 [binary: 1011111 & 1111111111111111 = 1011111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(107, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(107, 32767) -> 107 [binary: 1101011 & 111111111111111 = 1101011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2405, 5) -> 76960 [32-bit: 2405 * 2^5 = 76960]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(77004, 32767) -> 11468 [binary: 10010110011001100 & 111111111111111 = 10110011001100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(96, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(96, 65535) -> 96 [binary: 1100000 & 1111111111111111 = 1100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 32767) -> 108 [binary: 1101100 & 111111111111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(11468, 5) -> 366976 [32-bit: 11468 * 2^5 = 366976]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(367084, 32767) -> 6636 [binary: 1011001100111101100 & 111111111111111 = 1100111101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(97, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(97, 65535) -> 97 [binary: 1100001 & 1111111111111111 = 1100001]
[2025-07-31 21:43:35] [BitwiseOps::and] and(109, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(109, 32767) -> 109 [binary: 1101101 & 111111111111111 = 1101101]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(6636, 5) -> 212352 [32-bit: 6636 * 2^5 = 212352]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(212463, 32767) -> 15855 [binary: 110011110111101111 & 111111111111111 = 11110111101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(98, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(98, 65535) -> 98 [binary: 1100010 & 1111111111111111 = 1100010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(110, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(110, 32767) -> 110 [binary: 1101110 & 111111111111111 = 1101110]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15855, 5) -> 507360 [32-bit: 15855 * 2^5 = 507360]
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(32, 255) -> 32 [binary: 100000 & 11111111 = 100000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(507328, 32767) -> 15808 [binary: 1111011110111000000 & 111111111111111 = 11110111000000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(99, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(99, 65535) -> 99 [binary: 1100011 & 1111111111111111 = 1100011]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 32767) -> 111 [binary: 1101111 & 111111111111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(15808, 5) -> 505856 [32-bit: 15808 * 2^5 = 505856]
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(87, 255) -> 87 [binary: 1010111 & 11111111 = 1010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(505943, 32767) -> 14423 [binary: 1111011100001010111 & 111111111111111 = 11100001010111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 65535) -> 100 [binary: 1100100 & 1111111111111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(112, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(112, 32767) -> 112 [binary: 1110000 & 111111111111111 = 1110000]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(14423, 5) -> 461536 [32-bit: 14423 * 2^5 = 461536]
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(111, 255) -> 111 [binary: 1101111 & 11111111 = 1101111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 11: 1&1=1, adding 2048 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(461455, 32767) -> 2703 [binary: 1110000101010001111 & 111111111111111 = 101010001111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(101, 65535) -> 101 [binary: 1100101 & 1111111111111111 = 1100101]
[2025-07-31 21:43:35] [BitwiseOps::and] and(113, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(113, 32767) -> 113 [binary: 1110001 & 111111111111111 = 1110001]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2703, 5) -> 86496 [32-bit: 2703 * 2^5 = 86496]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 255) -> 114 [binary: 1110010 & 11111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(86418, 32767) -> 20882 [binary: 10101000110010010 & 111111111111111 = 101000110010010]
[2025-07-31 21:43:35] [BitwiseOps::and] and(102, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(102, 65535) -> 102 [binary: 1100110 & 1111111111111111 = 1100110]
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(114, 32767) -> 114 [binary: 1110010 & 111111111111111 = 1110010]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(20882, 5) -> 668224 [32-bit: 20882 * 2^5 = 668224]
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(108, 255) -> 108 [binary: 1101100 & 11111111 = 1101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 9: 1&1=1, adding 512 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 12: 1&1=1, adding 4096 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 13: 1&1=1, adding 8192 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(668204, 32767) -> 12844 [binary: 10100011001000101100 & 111111111111111 = 11001000101100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(103, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(103, 65535) -> 103 [binary: 1100111 & 1111111111111111 = 1100111]
[2025-07-31 21:43:35] [BitwiseOps::and] and(115, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 0: 1&1=1, adding 1 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 1: 1&1=1, adding 2 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(115, 32767) -> 115 [binary: 1110011 & 111111111111111 = 1110011]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(12844, 5) -> 411008 [32-bit: 12844 * 2^5 = 411008]
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(100, 255) -> 100 [binary: 1100100 & 11111111 = 1100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 7: 1&1=1, adding 128 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 8: 1&1=1, adding 256 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 10: 1&1=1, adding 1024 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 14: 1&1=1, adding 16384 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(411108, 32767) -> 17892 [binary: 1100100010111100100 & 111111111111111 = 100010111100100]
[2025-07-31 21:43:35] [BitwiseOps::and] and(104, 65535) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 3: 1&1=1, adding 8 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(104, 65535) -> 104 [binary: 1101000 & 1111111111111111 = 1101000]
[2025-07-31 21:43:35] [BitwiseOps::and] and(116, 32767) starting bit-by-bit analysis [32-bit]
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 2: 1&1=1, adding 4 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 4: 1&1=1, adding 16 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 5: 1&1=1, adding 32 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and: bit position 6: 1&1=1, adding 64 to result
[2025-07-31 21:43:35] [BitwiseOps::and] and(116, 32767) -> 116 [binary: 1110100 & 111111111111111 = 1110100]
[2025-07-31 21:43:35] [DEBUG_FILL] fillWindow called: lookAhead=0, strStart=119, availIn=${strm.availIn}
[2025-07-31 21:43:35] [DEBUG_FILL] more=65417, windowSize=65536
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5, 1) -> 10 [32-bit: 5 * 2^1 = 10]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(4, 1) -> 8 [32-bit: 4 * 2^1 = 8]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(3, 1) -> 6 [32-bit: 3 * 2^1 = 6]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5, 1) -> 10 [32-bit: 5 * 2^1 = 10]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(10, 1) -> 20 [32-bit: 10 * 2^1 = 20]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(3, 1) -> 6 [32-bit: 3 * 2^1 = 6]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5, 1) -> 10 [32-bit: 5 * 2^1 = 10]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(4, 1) -> 8 [32-bit: 4 * 2^1 = 8]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(9, 1) -> 18 [32-bit: 9 * 2^1 = 18]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(4, 1) -> 8 [32-bit: 4 * 2^1 = 8]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(8, 1) -> 16 [32-bit: 8 * 2^1 = 16]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(4, 1) -> 8 [32-bit: 4 * 2^1 = 8]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5, 1) -> 10 [32-bit: 5 * 2^1 = 10]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(3, 1) -> 6 [32-bit: 3 * 2^1 = 6]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(7, 1) -> 14 [32-bit: 7 * 2^1 = 14]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(3, 1) -> 6 [32-bit: 3 * 2^1 = 6]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(5, 1) -> 10 [32-bit: 5 * 2^1 = 10]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(3, 1) -> 6 [32-bit: 3 * 2^1 = 6]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(4, 1) -> 8 [32-bit: 4 * 2^1 = 8]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(3, 1) -> 6 [32-bit: 3 * 2^1 = 6]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(3, 1) -> 6 [32-bit: 3 * 2^1 = 6]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(3, 1) -> 6 [32-bit: 3 * 2^1 = 6]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(4, 1) -> 8 [32-bit: 4 * 2^1 = 8]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(2, 1) -> 4 [32-bit: 2 * 2^1 = 4]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 1) -> 2 [32-bit: 1 * 2^1 = 2]
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=72 (char='H'), code=120, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=101 (char='e'), code=149, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=108 (char='l'), code=156, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=108 (char='l'), code=156, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=111 (char='o'), code=159, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=32 (char=' '), code=80, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=87 (char='W'), code=135, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=111 (char='o'), code=159, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=114 (char='r'), code=162, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=108 (char='l'), code=156, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=100 (char='d'), code=148, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=32 (char=' '), code=80, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=72 (char='H'), code=120, bits=8
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=279 (char='?'), code=23, bits=7
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=6 (char='?'), code=6, bits=5
[2025-07-31 21:43:35] [DEBUG_SEND] sendCode: symbol=256 (char='?'), code=0, bits=7
[2025-07-31 21:43:35] === ZStream.inflateInit CALLED with w=15 ===
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(1, 15) -> 32768 [32-bit: 1 * 2^15 = 32768]
[2025-07-31 21:43:35] [RESET_DEBUG] InfBlocks reset: read=0, write=0, window size=32768
[2025-07-31 21:43:35] [Adler32::adler32] null buffer provided, returning initial value 1
[2025-07-31 21:43:35] inflateInit: wbits=15 nowrap=0
[2025-07-31 21:43:35] [RESET_DEBUG] InfBlocks reset: read=0, write=0, window size=32768
[2025-07-31 21:43:35] [Adler32::adler32] null buffer provided, returning initial value 1
[2025-07-31 21:43:35] inflateReset: mode=0
[2025-07-31 21:43:35] === ZStream.inflate CALLED with f=4 ===
[2025-07-31 21:43:35] ZStream.inflate: Delegating to iState.inflate
[2025-07-31 21:43:35] === INFLATE FUNCTION CALLED ===
[2025-07-31 21:43:35] [Inflate::unknown] Starting inflate with f=4, availIn=23, availOut=676
[2025-07-31 21:43:35] [Inflate::unknown] === While loop iteration 1 ===
[2025-07-31 21:43:35] [Inflate::unknown] Processing mode=0, availIn=23, availOut=676
[2025-07-31 21:43:35] [Inflate::unknown] About to enter when statement for mode 0
[2025-07-31 21:43:35] [Inflate::unknown] Mode: INF_METHOD
[2025-07-31 21:43:35] [Inflate::unknown] Read method byte: 120 (compression=8, windowBits=15)
[2025-07-31 21:43:35] [BitwiseOps::unknown] and(120, 15) -> 8
[2025-07-31 21:43:35] [BitwiseOps::unknown] rightShift(120, 4) -> 7
[2025-07-31 21:43:35] [Inflate::unknown] Method processed successfully, moving to FLAG mode
[2025-07-31 21:43:35] [Inflate::unknown] === Completed when statement for iteration 1, continuing while loop ===
[2025-07-31 21:43:35] [Inflate::unknown] === While loop iteration 2 ===
[2025-07-31 21:43:35] [Inflate::unknown] Processing mode=1, availIn=22, availOut=676
[2025-07-31 21:43:35] [Inflate::unknown] About to enter when statement for mode 1
[2025-07-31 21:43:35] [Inflate::unknown] Mode: INF_FLAG
[2025-07-31 21:43:35] [Inflate::unknown] Read flag byte: 156 (0x9c)
[2025-07-31 21:43:35] [BitwiseOps::unknown] and(156, 255) -> 156
[2025-07-31 21:43:35] [BitwiseOps::unknown] leftShift(120, 8) -> 30720
[2025-07-31 21:43:35] [Inflate::unknown] Header check calculation: ((120 << 8) + 156) % 31 = 0
[2025-07-31 21:43:35] inflate: FLAG: b=156
[2025-07-31 21:43:35] [Inflate::unknown] Checking dictionary flag: b=156, PRESET_DICT=32
[2025-07-31 21:43:35] [BitwiseOps::unknown] and(156, 32) -> 0
[2025-07-31 21:43:35] [Inflate::unknown] No dictionary needed, transitioning to INF_BLOCKS
[2025-07-31 21:43:35] [Inflate::unknown] Mode set to INF_BLOCKS, continuing to next iteration
[2025-07-31 21:43:35] [Inflate::unknown] === While loop iteration 3 ===
[2025-07-31 21:43:35] [Inflate::unknown] Processing mode=7, availIn=21, availOut=676
[2025-07-31 21:43:35] [Inflate::unknown] About to enter when statement for mode 7
[2025-07-31 21:43:35] [Inflate::unknown] Mode: INF_BLOCKS - processing data blocks
[2025-07-31 21:43:35] [Inflate::unknown] InfBlocks.proc: mode=0, write=0, read=0, rIn=0
[2025-07-31 21:43:35] [Inflate::unknown] Initial state: inputPointer=2, bytesAvailable=21, bitBuffer=0, bitsInBuffer=0
[2025-07-31 21:43:35] [Inflate::unknown] Processing block mode=0, bitBuffer=0x0, bitsInBuffer=0
[2025-07-31 21:43:35] [BitwiseOps::leftShift] leftShift(195, 0) -> 195 (no shift, normalized)
[2025-07-31 21:43:35] [BitwiseOps::unknown] Reading byte: 195, shifted by 8: 195, new bitBuffer=0xc3
[2025-07-31 21:43:35] [Inflate::unknown] Block type bits: 3, is_last=1
[2025-07-31 21:43:35] [BitwiseOps::unknown] extractBits(195, 3) -> 3
[2025-07-31 21:43:35] [BitwiseOps::unknown] extractBits(3, 1) -> 1
[2025-07-31 21:43:35] [Inflate::unknown] Block type: 1 (0=stored, 1=fixed, 2=dynamic)
[2025-07-31 21:43:35] [Inflate::unknown] Processing fixed Huffman block
[2025-07-31 21:43:35] [Huffman::unknown] Calling InfTree.inflateTreesFixed
[2025-07-31 21:43:35] [InfTree::huftBuild] Starting Huffman table construction
[2025-07-31 21:43:35] [InfTree::huftBuild] Parameters: bIndex=0, n=288, s=286, hp.size=4320, initial_hn=0
[2025-07-31 21:43:35] [InfTree::huftBuild] Bit length counts: 7:24, 8:152, 9:112
[2025-07-31 21:43:35] [InfTree::huftBuild] Bit length range: minBits=7, maxBits=9
[2025-07-31 21:43:35] [InfTree::huftBuild] Bit length 7: starting index=0, count=24
[2025-07-31 21:43:35] [InfTree::huftBuild] Bit length 8: starting index=24, count=152
[2025-07-31 21:43:35] [InfTree::huftBuild] Bit length 9: starting index=176, count=112
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 0 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 1 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 2 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 3 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 4 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 5 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 6 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 7 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 8 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 9 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 10 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 11 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 12 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 13 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 14 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 15 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 16 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 17 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 18 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 19 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 20 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 21 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 22 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 23 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 24 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 25 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 26 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 27 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 28 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 29 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 30 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 31 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 32 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 33 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 34 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 35 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 36 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 37 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 38 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 39 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 40 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 41 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 42 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 43 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 44 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 45 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 46 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 47 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 48 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 49 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 50 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 51 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 52 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 53 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 54 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 55 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 56 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 57 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 58 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 59 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 60 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 61 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 62 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 63 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 64 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 65 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 66 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 67 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 68 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 69 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 70 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 71 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 72 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 73 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 74 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 75 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 76 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 77 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 78 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 79 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 80 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 81 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 82 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 83 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 84 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 85 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 86 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 87 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 88 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 89 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 90 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 91 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 92 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 93 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 94 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 95 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 96 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 97 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 98 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 99 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 100 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 101 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 102 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 103 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 104 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 105 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 106 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 107 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 108 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 109 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 110 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 111 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 112 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 113 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 114 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 115 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 116 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 117 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 118 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 119 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 120 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 121 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 122 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 123 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 124 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 125 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 126 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 127 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 128 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 129 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 130 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 131 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 132 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 133 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 134 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 135 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 136 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 137 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 138 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 139 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 140 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 141 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 142 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 143 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 144 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 145 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 146 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 147 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 148 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 149 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 150 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 151 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 152 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 153 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 154 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 155 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 156 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 157 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 158 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 159 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 160 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 161 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 162 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 163 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 164 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 165 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 166 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 167 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 168 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 169 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 170 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 171 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 172 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 173 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 174 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 175 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 176 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 177 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 178 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 179 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 180 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 181 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 182 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 183 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 184 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 185 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 186 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 187 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 188 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 189 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 190 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 191 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 192 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 193 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 194 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 195 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 196 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 197 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 198 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 199 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 200 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 201 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 202 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 203 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 204 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 205 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 206 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 207 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 208 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 209 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 210 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 211 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 212 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 213 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 214 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 215 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 216 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 217 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 218 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 219 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 220 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 221 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 222 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 223 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 224 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 225 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 226 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 227 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 228 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 229 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 230 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 231 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 232 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 233 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 234 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 235 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 236 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 237 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 238 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 239 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 240 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 241 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 242 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 243 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 244 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 245 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 246 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 247 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 248 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 249 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 250 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 251 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 252 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 253 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 254 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 255 assigned bit length 9
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 256 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 257 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 258 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 259 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 260 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 261 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 262 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 263 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 264 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 265 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 266 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 267 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 268 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 269 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 270 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 271 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 272 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 273 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 274 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 275 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 276 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 277 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 278 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 279 assigned bit length 7
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 280 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 281 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 282 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 283 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 284 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 285 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 286 assigned bit length 8
[2025-07-31 21:43:35] [InfTree::huftBuild] Symbol 287 assigned bit length 8
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=0, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=3, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=4, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=5, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=6, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=7, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=8, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=9, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=10, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=11, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=12, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=13, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=14, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=15, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=16, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=17, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=18, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=19, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=20, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=21, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=22, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=23, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=24, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=25, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=26, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=27, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=28, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=29, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=30, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=31, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=32, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=33, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=34, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=35, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=36, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=37, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=38, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=39, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=40, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=41, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=42, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=43, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=44, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=45, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=46, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=47, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=48, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=49, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=50, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=51, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=52, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=53, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=54, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=55, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=56, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=57, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=58, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=59, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=60, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=61, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=62, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=63, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=64, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=65, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=66, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=67, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=68, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=69, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=70, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=71, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=72, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=73, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=74, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=75, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=76, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=77, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=78, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=79, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=80, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=81, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=82, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=83, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=84, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=85, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=86, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=87, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=88, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=89, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=90, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=91, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=92, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=93, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=94, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=95, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=96, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=97, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=98, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=99, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=100, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=101, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=102, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=103, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=104, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=105, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=106, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=107, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=108, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=109, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=110, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=111, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=112, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=113, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=114, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=115, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=116, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=117, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=118, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=119, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=120, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=121, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=122, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=123, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=124, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=125, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=126, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=127, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=128, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=129, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=130, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=131, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=132, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=133, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=134, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=135, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=136, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=137, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=138, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=139, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=140, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=141, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=142, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=143, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=144, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=145, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=146, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=147, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=148, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=149, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=150, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=151, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=152, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=153, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=154, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=155, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=156, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=157, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=158, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=159, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=160, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=161, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=162, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=163, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=164, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=165, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=166, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=167, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=168, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=169, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=170, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=171, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=172, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=173, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=174, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=175, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=176, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=177, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=178, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=179, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=180, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=181, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=182, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=183, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=184, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=185, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=186, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=187, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=188, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=189, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=190, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=191, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=192, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=193, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=194, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=195, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=196, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=197, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=198, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=199, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=200, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=201, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=202, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=203, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=204, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=205, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=206, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=207, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=208, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=209, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=210, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=211, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=212, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=213, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=214, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=215, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=216, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=217, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=218, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=219, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=220, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=221, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=222, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=223, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=224, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=225, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=226, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=227, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=228, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=229, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=230, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=231, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=232, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=233, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=234, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=235, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=236, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=237, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=238, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=239, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=240, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=241, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=242, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=243, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=244, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=245, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=246, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=247, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=248, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=249, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=250, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=251, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=252, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=253, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=254, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=255, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=256, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=257, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=258, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=259, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=260, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=261, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=262, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=263, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=264, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=265, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=266, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=267, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=268, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=269, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=270, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=271, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=272, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=273, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=274, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=275, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=276, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=277, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=278, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=279, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=280, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=281, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=282, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=283, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=284, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=285, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=286, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=287, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=288, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=289, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=290, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=291, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=292, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=293, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=294, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=295, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=296, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=297, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=298, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=299, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=300, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=301, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=302, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=303, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=304, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=305, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=306, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=307, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=308, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=309, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=310, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=311, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=312, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=313, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=314, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=315, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=316, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=317, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=318, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=319, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=320, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=321, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=322, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=323, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=324, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=325, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=326, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=327, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=328, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=329, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=330, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=331, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=332, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=333, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=334, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=335, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=336, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=337, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=338, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=339, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=340, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=341, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=342, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=343, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=344, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=345, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=346, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=347, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=348, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=349, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=350, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=351, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=352, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=353, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=354, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=355, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=356, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=357, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=358, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=359, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=360, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=361, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=362, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=363, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=364, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=365, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=366, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=367, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=368, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=369, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=370, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=371, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=372, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=373, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=374, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=375, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=376, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=377, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=378, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=379, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=380, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=381, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=382, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=383, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=384, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=385, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=386, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=387, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=388, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=389, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=390, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=391, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=392, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=393, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=394, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=395, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=396, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=397, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=398, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=399, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=400, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=401, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=402, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=403, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=404, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=405, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=406, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=407, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=408, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=409, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=410, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=411, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=412, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=413, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=414, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=415, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=416, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=417, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=418, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=419, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=420, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=421, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=422, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=423, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=424, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=425, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=426, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=427, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=428, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=429, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=430, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=431, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=432, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=433, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=434, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=435, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=436, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=437, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=438, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=439, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=440, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=441, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=442, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=443, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=444, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=445, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=446, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=447, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=448, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=449, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=450, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=451, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=452, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=453, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=454, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=455, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=456, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=457, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=458, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=459, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=460, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=461, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=462, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=463, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=464, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=465, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=466, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=467, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=468, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=469, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=470, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=471, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=472, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=473, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=474, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=475, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=476, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=477, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=478, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=479, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=480, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=481, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=482, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=483, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=484, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=485, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=486, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=487, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=488, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=489, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=490, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=491, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=492, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=493, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=494, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=495, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=496, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=497, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=498, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=499, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=500, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=501, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=502, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=503, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=504, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=505, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=506, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=507, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=508, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=509, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=510, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=511, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=512, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=513, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=514, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=515, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=516, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=517, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=518, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=519, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=520, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=521, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=522, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=523, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=524, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=525, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=526, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=527, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=528, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=529, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=530, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=531, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=532, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=533, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=534, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=535, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=536, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=537, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=538, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=539, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=540, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=541, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=542, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=543, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=544, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=545, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=546, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=547, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=548, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=549, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=550, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=551, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=552, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=553, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=554, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=555, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=556, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=557, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=558, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=559, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=560, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=561, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=562, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=563, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=564, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=565, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=566, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=567, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=568, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=569, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=570, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=571, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=572, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=573, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=574, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=575, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=576, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=577, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=578, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=579, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=580, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=581, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=582, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=583, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=584, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=585, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=586, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=587, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=588, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=589, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=590, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=591, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=592, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=593, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=594, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=595, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=596, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=597, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=598, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=599, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=600, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=601, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=602, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=603, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=604, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=605, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=606, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=607, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=608, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=609, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=610, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=611, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=612, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=613, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=614, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=615, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=616, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=617, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=618, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=619, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=620, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=621, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=622, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=623, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=624, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=625, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=626, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=627, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=628, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=629, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=630, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=631, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=632, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=633, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=634, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=635, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=636, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=637, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=638, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=639, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=640, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=641, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=642, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=643, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=644, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=645, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=646, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=647, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=648, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=649, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=650, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=651, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=652, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=653, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=654, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=655, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=656, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=657, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=658, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=659, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=660, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=661, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=662, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=663, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=664, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=665, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=666, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=667, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=668, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=669, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=670, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=671, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=672, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=673, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=674, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=675, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=676, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=677, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=678, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=679, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=680, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=681, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=682, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=683, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=684, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=685, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=686, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=687, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=688, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=689, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=690, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=691, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=692, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=693, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=694, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=695, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=696, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=697, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=698, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=699, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=700, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=701, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=702, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=703, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=704, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=705, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=706, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=707, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=708, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=709, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=710, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=711, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=712, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=713, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=714, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=715, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=716, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=717, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=718, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=719, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=720, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=721, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=722, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=723, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=724, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=725, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=726, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=727, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=728, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=729, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=730, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=731, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=732, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=733, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=734, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=735, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=736, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=737, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=738, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=739, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=740, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=741, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=742, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=743, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=744, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=745, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=746, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=747, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=748, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=749, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=750, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=751, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=752, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=753, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=754, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=755, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=756, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=757, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=758, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=759, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=760, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=761, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=762, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=763, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=764, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=765, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=766, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=767, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=768, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=769, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=770, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=771, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=772, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=773, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=774, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=775, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=776, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=777, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=778, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=779, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=780, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=781, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=782, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=783, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=784, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=785, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=786, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=787, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=788, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=789, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=790, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=791, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=792, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=793, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=794, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=795, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=796, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=797, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=798, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=799, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=800, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=801, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=802, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=803, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=804, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=805, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=806, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=807, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=808, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=809, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=810, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=811, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=812, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=813, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=814, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=815, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=816, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=817, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=818, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=819, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=820, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=821, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=822, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=823, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=824, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=825, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=826, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=827, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=828, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=829, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=830, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=831, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=832, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=833, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=834, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=835, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=836, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=837, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=838, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=839, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=840, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=841, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=842, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=843, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=844, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=845, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=846, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=847, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=848, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=849, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=850, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=851, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=852, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=853, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=854, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=855, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=856, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=857, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=858, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=859, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=860, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=861, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=862, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=863, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=864, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=865, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=866, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=867, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=868, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=869, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=870, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=871, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=872, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=873, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=874, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=875, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=876, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=877, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=878, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=879, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=880, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=881, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=882, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=883, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=884, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=885, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=886, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=887, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=888, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=889, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=890, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=891, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=892, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=893, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=894, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=895, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=896, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=897, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=898, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=899, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=900, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=901, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=902, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=903, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=904, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=905, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=906, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=907, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=908, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=909, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=910, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=911, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=912, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=913, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=914, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=915, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=916, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=917, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=918, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=919, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=920, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=921, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=922, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=923, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=924, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=925, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=926, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=927, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=928, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=929, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=930, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=931, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=932, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=933, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=934, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=935, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=936, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=937, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=938, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=939, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=940, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=941, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=942, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=943, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=944, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=945, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=946, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=947, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=948, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=949, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=950, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=951, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=952, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=953, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=954, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=955, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=956, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=957, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=958, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=959, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=960, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=961, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=962, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=963, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=964, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=965, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=966, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=967, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=968, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=969, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=970, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=971, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=972, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=973, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=974, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=975, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=976, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=977, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=978, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=979, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=980, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=981, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=982, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=983, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=984, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=985, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=986, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=987, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=988, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=989, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=990, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=991, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=992, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=993, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=994, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=995, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=996, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=997, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=998, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=999, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1000, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1001, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1002, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1003, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1004, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1005, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1006, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1007, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1008, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1009, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1010, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1011, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1012, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1013, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1014, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1015, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1016, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1017, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1018, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1019, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1020, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1021, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1022, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1023, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1024, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1025, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1026, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1027, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1028, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1029, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1030, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1031, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1032, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1033, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1034, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1035, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1036, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1037, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1038, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1039, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1040, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1041, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1042, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1043, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1044, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1045, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1046, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1047, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1048, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1049, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1050, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1051, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1052, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1053, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1054, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1055, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1056, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1057, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1058, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1059, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1060, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1061, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1062, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1063, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1064, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1065, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1066, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1067, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1068, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1069, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1070, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1071, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1072, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1073, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1074, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1075, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1076, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1077, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1078, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1079, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1080, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1081, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1082, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1083, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1084, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1085, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1086, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1087, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1088, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1089, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1090, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1091, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1092, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1093, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1094, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1095, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1096, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1097, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1098, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1099, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1100, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1101, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1102, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1103, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1104, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1105, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1106, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1107, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1108, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1109, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1110, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1111, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1112, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1113, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1114, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1115, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1116, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1117, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1118, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1119, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1120, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1121, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1122, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1123, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1124, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1125, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1126, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1127, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1128, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1129, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1130, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1131, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1132, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1133, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1134, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1135, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1136, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1137, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1138, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1139, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1140, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1141, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1142, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1143, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1144, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1145, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1146, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1147, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1148, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1149, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1150, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1151, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1152, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1153, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1154, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1155, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1156, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1157, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1158, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1159, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1160, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1161, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1162, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1163, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1164, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1165, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1166, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1167, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1168, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1169, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1170, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1171, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1172, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1173, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1174, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1175, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1176, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1177, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1178, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1179, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1180, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1181, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1182, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1183, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1184, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1185, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1186, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1187, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1188, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1189, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1190, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1191, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1192, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1193, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1194, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1195, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1196, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1197, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1198, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1199, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1200, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1201, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1202, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1203, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1204, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1205, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1206, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1207, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1208, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1209, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1210, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1211, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1212, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1213, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1214, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1215, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1216, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1217, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1218, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1219, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1220, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1221, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1222, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1223, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1224, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1225, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1226, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1227, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1228, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1229, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1230, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1231, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1232, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1233, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1234, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1235, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1236, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1237, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1238, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1239, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1240, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1241, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1242, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1243, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1244, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1245, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1246, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1247, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1248, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1249, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1250, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1251, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1252, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1253, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1254, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1255, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1256, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1257, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1258, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1259, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1260, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1261, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1262, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1263, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1264, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1265, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1266, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1267, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1268, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1269, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1270, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1271, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1272, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1273, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1274, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1275, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1276, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1277, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1278, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1279, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1280, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1281, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1282, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1283, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1284, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1285, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1286, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1287, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1288, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1289, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1290, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1291, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1292, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1293, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1294, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1295, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1296, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1297, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1298, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1299, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1300, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1301, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1302, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1303, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1304, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1305, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1306, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1307, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1308, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1309, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1310, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1311, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1312, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1313, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1314, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1315, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1316, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1317, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1318, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1319, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1320, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1321, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1322, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1323, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1324, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1325, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1326, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1327, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1328, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1329, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1330, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1331, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1332, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1333, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1334, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1335, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1336, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1337, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1338, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1339, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1340, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1341, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1342, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1343, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1344, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1345, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1346, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1347, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1348, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1349, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1350, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1351, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1352, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1353, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1354, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1355, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1356, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1357, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1358, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1359, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1360, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1361, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1362, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1363, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1364, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1365, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1366, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1367, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1368, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1369, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1370, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1371, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1372, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1373, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1374, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1375, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1376, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1377, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1378, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1379, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1380, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1381, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1382, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1383, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1384, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1385, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1386, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1387, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1388, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1389, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1390, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1391, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1392, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1393, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1394, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1395, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1396, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1397, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1398, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1399, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1400, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1401, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1402, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1403, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1404, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1405, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1406, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1407, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1408, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1409, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1410, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1411, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1412, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1413, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1414, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1415, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1416, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1417, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1418, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1419, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1420, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1421, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1422, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1423, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1424, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1425, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1426, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1427, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1428, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1429, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1430, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1431, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1432, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1433, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1434, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1435, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1436, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1437, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1438, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1439, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1440, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1441, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1442, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1443, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1444, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1445, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1446, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1447, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1448, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1449, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1450, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1451, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1452, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1453, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1454, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1455, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1456, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1457, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1458, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1459, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1460, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1461, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1462, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1463, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1464, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1465, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1466, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1467, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1468, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1469, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1470, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1471, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1472, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1473, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1474, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1475, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1476, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1477, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1478, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1479, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1480, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1481, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1482, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1483, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1484, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1485, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1486, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1487, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1488, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1489, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1490, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1491, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1492, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1493, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1494, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1495, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1496, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1497, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1498, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1499, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1500, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1501, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1502, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1503, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1504, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1505, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1506, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1507, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1508, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1509, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1510, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1511, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1512, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1513, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1514, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1515, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1516, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1517, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1518, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1519, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1520, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1521, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1522, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1523, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1524, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1525, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1526, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1527, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1528, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1529, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1530, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1531, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1532, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1533, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1534, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1535, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1536, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1537, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1538, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1539, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1540, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1541, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1542, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1543, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1544, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1545, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1546, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1547, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1548, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1549, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1550, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1551, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1552, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1553, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1554, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1555, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1556, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1557, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1558, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1559, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1560, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1561, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1562, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1563, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1564, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1565, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1566, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1567, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1568, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1569, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1570, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1571, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1572, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1573, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1574, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1575, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1576, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1577, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1578, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1579, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1580, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1581, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1582, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1583, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1584, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1585, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1586, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1587, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1588, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1589, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1590, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1591, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1592, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1593, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1594, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1595, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1596, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1597, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1598, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1599, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1600, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1601, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1602, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1603, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1604, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1605, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1606, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1607, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1608, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1609, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1610, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1611, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1612, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1613, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1614, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1615, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1616, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1617, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1618, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1619, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1620, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1621, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1622, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1623, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1624, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1625, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1626, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1627, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1628, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1629, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1630, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1631, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1632, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1633, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1634, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1635, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1636, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1637, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1638, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1639, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1640, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1641, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1642, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1643, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1644, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1645, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1646, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1647, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1648, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1649, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1650, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1651, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1652, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1653, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1654, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1655, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1656, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1657, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1658, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1659, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1660, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1661, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1662, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1663, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1664, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1665, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1666, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1667, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1668, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1669, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1670, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1671, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1672, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1673, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1674, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1675, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1676, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1677, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1678, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1679, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1680, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1681, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1682, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1683, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1684, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1685, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1686, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1687, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1688, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1689, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1690, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1691, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1692, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1693, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1694, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1695, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1696, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1697, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1698, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1699, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1700, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1701, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1702, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1703, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1704, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1705, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1706, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1707, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1708, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1709, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1710, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1711, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1712, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1713, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1714, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1715, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1716, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1717, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1718, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1719, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1720, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1721, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1722, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1723, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1724, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1725, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1726, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1727, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1728, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1729, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1730, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1731, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1732, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1733, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1734, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1735, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1736, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1737, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1738, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1739, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1740, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1741, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1742, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1743, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1744, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1745, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1746, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1747, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1748, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1749, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1750, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1751, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1752, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1753, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1754, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1755, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1756, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1757, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1758, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1759, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1760, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1761, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1762, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1763, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1764, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1765, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1766, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1767, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1768, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1769, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1770, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1771, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1772, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1773, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1774, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1775, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1776, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1777, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1778, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1779, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1780, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1781, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1782, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1783, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1784, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1785, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1786, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1787, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1788, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1789, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1790, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1791, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1792, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1793, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1794, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1795, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1796, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1797, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1798, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1799, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1800, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1801, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1802, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1803, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1804, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1805, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1806, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1807, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1808, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1809, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1810, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1811, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1812, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1813, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1814, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1815, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1816, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1817, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1818, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1819, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1820, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1821, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1822, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1823, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1824, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1825, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1826, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1827, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1828, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1829, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1830, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1831, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1832, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1833, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1834, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1835, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1836, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1837, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1838, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1839, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1840, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1841, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1842, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1843, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1844, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1845, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1846, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1847, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1848, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1849, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1850, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1851, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1852, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1853, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1854, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1855, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1856, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1857, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1858, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1859, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1860, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1861, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1862, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1863, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1864, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1865, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1866, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1867, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1868, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1869, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1870, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1871, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1872, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1873, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1874, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1875, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1876, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1877, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1878, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1879, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1880, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1881, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1882, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1883, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1884, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1885, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1886, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1887, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1888, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1889, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1890, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1891, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1892, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1893, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1894, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1895, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1896, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1897, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1898, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1899, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1900, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1901, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1902, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1903, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1904, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1905, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1906, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1907, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1908, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1909, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1910, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1911, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1912, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1913, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1914, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1915, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1916, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1917, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1918, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1919, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1920, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1921, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1922, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1923, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1924, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1925, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1926, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1927, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1928, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1929, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1930, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1931, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1932, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1933, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1934, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1935, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1936, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1937, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1938, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1939, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1940, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1941, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1942, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1943, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1944, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1945, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1946, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1947, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1948, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1949, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1950, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1951, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1952, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1953, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1954, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1955, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1956, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1957, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1958, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1959, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1960, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1961, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1962, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1963, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1964, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1965, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1966, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1967, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1968, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1969, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1970, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1971, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1972, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1973, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1974, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1975, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1976, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1977, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1978, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1979, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1980, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1981, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1982, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1983, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1984, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1985, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1986, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1987, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1988, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1989, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1990, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1991, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1992, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1993, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1994, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1995, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1996, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1997, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1998, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=1999, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2000, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2001, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2002, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2003, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2004, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2005, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2006, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2007, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2008, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2009, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2010, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2011, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2012, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2013, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2014, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2015, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2016, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2017, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2018, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2019, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2020, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2021, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2022, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2023, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2024, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2025, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2026, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2027, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2028, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2029, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2030, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2031, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2032, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2033, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2034, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2035, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2036, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2037, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2038, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2039, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2040, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2041, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2042, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2043, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2044, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2045, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2046, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2047, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2048, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2049, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2050, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2051, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2052, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2053, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2054, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2055, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2056, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2057, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2058, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2059, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2060, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2061, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2062, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2063, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2064, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2065, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2066, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2067, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2068, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2069, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2070, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2071, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2072, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2073, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2074, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2075, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2076, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2077, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2078, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2079, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2080, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2081, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2082, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2083, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2084, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2085, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2086, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2087, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2088, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2089, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2090, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2091, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2092, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2093, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2094, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2095, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2096, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2097, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2098, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2099, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2100, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2101, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2102, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2103, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2104, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2105, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2106, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2107, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2108, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2109, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2110, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2111, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2112, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2113, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2114, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2115, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2116, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2117, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2118, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2119, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2120, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2121, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2122, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2123, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2124, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2125, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2126, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2127, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2128, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2129, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2130, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2131, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2132, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2133, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2134, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2135, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2136, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2137, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2138, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2139, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2140, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2141, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2142, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2143, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2144, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2145, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2146, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2147, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2148, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2149, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2150, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2151, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2152, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2153, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2154, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2155, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2156, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2157, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2158, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2159, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2160, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2161, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2162, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2163, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2164, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2165, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2166, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2167, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2168, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2169, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2170, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2171, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2172, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2173, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2174, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2175, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2176, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2177, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2178, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2179, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2180, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2181, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2182, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2183, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2184, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2185, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2186, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2187, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2188, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2189, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2190, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2191, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2192, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2193, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2194, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2195, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2196, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2197, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2198, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2199, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2200, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2201, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2202, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2203, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2204, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2205, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2206, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2207, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2208, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2209, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2210, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2211, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2212, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2213, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2214, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2215, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2216, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2217, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2218, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2219, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2220, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2221, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2222, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2223, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2224, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2225, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2226, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2227, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2228, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2229, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2230, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2231, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2232, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2233, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2234, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2235, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2236, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2237, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2238, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2239, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2240, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2241, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2242, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2243, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2244, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2245, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2246, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2247, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2248, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2249, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2250, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2251, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2252, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2253, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2254, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2255, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2256, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2257, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2258, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2259, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2260, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2261, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2262, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2263, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2264, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2265, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2266, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2267, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2268, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2269, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2270, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2271, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2272, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2273, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2274, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2275, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2276, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2277, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2278, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2279, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2280, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2281, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2282, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2283, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2284, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2285, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2286, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2287, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2288, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2289, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2290, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2291, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2292, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2293, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2294, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2295, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2296, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2297, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2298, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2299, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2300, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2301, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2302, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2303, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2304, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2305, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2306, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2307, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2308, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2309, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2310, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2311, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2312, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2313, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2314, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2315, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2316, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2317, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2318, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2319, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2320, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2321, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2322, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2323, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2324, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2325, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2326, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2327, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2328, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2329, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2330, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2331, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2332, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2333, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2334, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2335, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2336, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2337, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2338, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2339, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2340, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2341, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2342, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2343, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2344, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2345, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2346, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2347, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2348, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2349, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2350, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2351, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2352, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2353, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2354, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2355, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2356, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2357, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2358, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2359, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2360, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2361, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2362, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2363, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2364, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2365, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2366, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2367, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2368, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2369, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2370, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2371, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2372, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2373, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2374, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2375, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2376, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2377, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2378, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2379, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2380, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2381, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2382, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2383, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2384, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2385, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2386, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2387, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2388, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2389, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2390, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2391, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2392, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2393, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2394, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2395, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2396, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2397, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2398, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2399, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2400, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2401, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2402, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2403, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2404, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2405, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2406, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2407, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2408, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2409, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2410, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2411, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2412, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2413, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2414, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2415, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2416, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2417, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2418, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2419, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2420, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2421, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2422, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2423, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2424, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2425, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2426, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2427, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2428, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2429, hp.size=4320
[2025-07-31 21:43:35] [DEBUG_LOG] huftBuild: Before hp[hn[0]++] = 0. hn[0]=2430, hp.size=4320
